import requests
import schedule
import time
import uuid

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Google Analytics
GA_MEASUREMENT_ID = "10113434014"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Measurement ID
GA_MEASUREMENT_ID = "G-KWGNW16Z4F"
GA_API_SECRET = "9_dPCD1cRMmS1VezHeGE8A"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API Secret
GA_ENDPOINT = f"https://www.google-analytics.com/mp/collect?measurement_id={GA_MEASUREMENT_ID}&api_secret={GA_API_SECRET}"

# URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ UAH/USD
#EXCHANGE_RATE_API_URL = "https://api.privatbank.ua/p24api/pubinfo?exchange&json&coursid=11"

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
EXCHANGE_RATE_API_URL = "https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json"

# –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –∏ –∏—Ö –≤–∞–ª—é—Ç (ISO 3166-1 alpha-2 –∏ –∫–æ–¥ –≤–∞–ª—é—Ç—ã ISO 4217)
COUNTRIES = [
    {"country": "US", "currency": "USD", "flag": "üá∫üá∏", "name": "United States"},
    {"country": "CA", "currency": "CAD", "flag": "üá®üá¶", "name": "Canada"},
    {"country": "GB", "currency": "GBP", "flag": "üá¨üáß", "name": "United Kingdom"},
    {"country": "EU", "currency": "EUR", "flag": "üá™üá∫", "name": "Eurozone"},
    {"country": "JP", "currency": "JPY", "flag": "üáØüáµ", "name": "Japan"},
    {"country": "AU", "currency": "AUD", "flag": "üá¶üá∫", "name": "Australia"},
    {"country": "CH", "currency": "CHF", "flag": "üá®üá≠", "name": "Switzerland"},
    {"country": "CN", "currency": "CNY", "flag": "üá®üá≥", "name": "China"},
    {"country": "IN", "currency": "INR", "flag": "üáÆüá≥", "name": "India"},
    {"country": "BR", "currency": "BRL", "flag": "üáßüá∑", "name": "Brazil"},
]

def fetch_exchange_rates():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å —Å–∞–π—Ç–∞ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ë–∞–Ω–∫–∞ –£–∫—Ä–∞–∏–Ω—ã."""
    response = requests.get(EXCHANGE_RATE_API_URL)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {response.status_code}")
        return []

def get_country_exchange_rate(rates, currency):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫—É—Ä—Å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã."""
    for rate in rates:
        if rate["cc"] == currency:
            return float(rate["rate"])
    return None

def send_event_to_ga4(country, currency, exchange_rate):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Google Analytics."""
    if exchange_rate is None:
        print(f"–ö—É—Ä—Å –¥–ª—è {country} ({currency}) –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    client_id = str(uuid.uuid4())
    payload = {
        "client_id": client_id, #"currency_tracker_123",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
        "events": [
            {
                "name": "currency_exchange_rate",
                "params": {
                    "debug_mode": True,
                    "geo_country": country,
                    "currency": currency,
                    "exchange_rate": exchange_rate,
                }
            }
        ]
    }
    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è: {payload}")
    response = requests.post(GA_ENDPOINT, json=payload)
    print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}, {response.text}")

    if response.status_code == 204:
        print(f"–°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {country} ({currency}): {exchange_rate}")
    else:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}, –æ—Ç–≤–µ—Ç: {response.text}")

def track_exchange_rates():
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã."""
    rates = fetch_exchange_rates()
    if not rates:
        return

    for country in COUNTRIES:
        exchange_rate = get_country_exchange_rate(rates, country["currency"])
        send_event_to_ga4(country["country"], country["currency"], exchange_rate)

# –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
schedule.every(30).seconds.do(track_exchange_rates)

if __name__ == "__main__":
    print("–¢—Ä–µ–∫–µ—Ä –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∑–∞–ø—É—â–µ–Ω.")
    while True:
        schedule.run_pending()
        time.sleep(1)